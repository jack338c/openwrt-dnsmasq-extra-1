#!/bin/sh /etc/rc.common

START=90
NAME=smartdns
USE_PROCD=1
EXTRA_COMMANDS="healthcheck"

CRON_FILE=/etc/crontabs/root

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_type() {
	case "$(uci_get_by_type $1 $2)" in
	1 | on | true | yes | enabled) return 0 ;;
	esac
	return 1
}

start_instance() {
	procd_open_instance
	procd_set_param respawn
	procd_set_param stderr 1
	procd_set_param term_timeout 3
	procd_set_param command $@
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger $NAME
}

start_service() {
	uci_bool_by_type $NAME enable || exit 0
	add_cron
	add_hotplug

	mkdir -p /var/etc/ /var/log/

	port=$(uci_get_by_type $NAME port 7700)
	if [ 1024 -lt $port ]; then
		if grep -q 'dnsmasq' /etc/shadow; then
			user='dnsmasq'
		elif grep -q 'nobody' /etc/shadow; then
			user='nobody'
		fi
	fi
	[ "V$user" = "V" ] && user='root'

	cat <<-EOF >"/var/etc/${NAME}.conf"
		bind 0.0.0.0:${port}
		bind-tcp 0.0.0.0:${port}
		user $user
		cache-size 1024
		cache-persist no
		serve-expired yes

		max-reply-ip-num 2
		rr-ttl-reply-max 600
		speed-check-mode tcp:443,tcp:80,ping
		domain-rules /github.com/ -c tcp:22

		prefetch-domain $(uci_bool_by_type $NAME prefetch && echo yes || echo no)
		dualstack-ip-selection $(uci_bool_by_type $NAME ipv6 && echo yes || echo no)
		force-AAAA-SOA $(uci_bool_by_type $NAME ipv6 && echo no || echo yes)
		force-qtype-SOA 65

		log-level info
		log-file /var/log/smartdns.log
		log-size 512K
		log-num 2

		address /dns11.quad9.net/149.112.112.11
		$(
			for it in $(uci_get_by_type $NAME bootstrap); do
				echo "server ${it} -group bootstrap -exclude-default-group"
				echo "server-tcp ${it} -group bootstrap -exclude-default-group"
			done
		)

		$(
			for type in tls https; do
				for it in $(uci_get_by_type $NAME server_${type}); do
					it=$(echo ${it} | sed 's+.*//++g; s+/.*++g' | sed 's+@.*++g')
					echo ${it} | grep -q '[0-9]$' || echo "nameserver /${it}/bootstrap"
				done
			done
		)

		$(
			for type in tls https; do
				for it in $(uci_get_by_type $NAME server_${type}); do
					echo "server-${type} ${it} -tls-host-verify" | sed 's+@+ -host-name +g'
				done
			done
		)

		$(
			for it in $(uci_get_by_type $NAME ignore_ip); do echo "ignore-ip ${it}"; done
		)

	EOF

	start_instance /usr/bin/$NAME -c "/var/etc/${NAME}.conf" -f

	uci_bool_by_type $NAME enable_cn && {
		cat <<-EOF >"/var/etc/${NAME}_cn.conf"
			bind 0.0.0.0:$((port + 1))
			bind-tcp 0.0.0.0:$((port + 1))
			user $user
			cache-size 2048
			cache-persist no
			serve-expired yes

			max-reply-ip-num 4
			rr-ttl-reply-max 120
			speed-check-mode ping,tcp:80,tcp:443

			prefetch-domain $(uci_bool_by_type $NAME prefetch && echo yes || echo no)
			dualstack-ip-selection $(uci_bool_by_type $NAME ipv6 && echo yes || echo no)
			force-AAAA-SOA $(uci_bool_by_type $NAME ipv6 && echo no || echo yes)
			force-qtype-SOA 65

			log-level info
			log-file /var/log/smartdns_cn.log
			log-size 512K
			log-num 2

			$(
				for it in $(uci_get_by_type $NAME bootstrap); do
					echo "server ${it} -group bootstrap -exclude-default-group"
					echo "server-tcp ${it} -group bootstrap -exclude-default-group"
				done
			)

			nameserver /doh.pub/bootstrap
			nameserver /dot.pub/bootstrap
			nameserver /dns.pub/bootstrap
			nameserver /doh.360.cn/bootstrap
			nameserver /dot.360.cn/bootstrap
			nameserver /dns.alidns.com/bootstrap

			server-tls 120.53.53.53:853 -host-name dot.pub -tls-host-verify
			server-tls 223.6.6.6:853 -host-name dns.alidns.com -tls-host-verify
			server-tls dot.360.cn:853 -host-name dot.360.cn -tls-host-verify
			server-https https://1.12.12.12/dns-query -host-name doh.pub -tls-host-verify
			server-https https://223.5.5.5/dns-query -host-name dns.alidns.com -tls-host-verify
			server-https https://doh.360.cn/dns-query -host-name doh.360.cn -tls-host-verify
		EOF

		uci_bool_by_type $NAME enable_cdn_cn && {
			echo -e "\n# CN-CDN" >>"/var/etc/${NAME}_cn.conf"
			# server 202.141.162.123 -group cdn -exclude-default-group
			# server-tcp 202.141.162.123 -group cdn -exclude-default-group
			# server 202.141.176.93 -group cdn -exclude-default-group
			# server-tcp 202.141.176.93 -group cdn -exclude-default-group
			cat <<-EOF >>"/var/etc/${NAME}_cn.conf"
				server 61.132.163.68 -group cdn -exclude-default-group
				server-tcp 61.132.163.68 -group cdn -exclude-default-group
				server 202.102.213.68 -group cdn -exclude-default-group
				server-tcp 202.102.213.68 -group cdn -exclude-default-group
				server 118.118.118.118 -group cdn -exclude-default-group
				server-tcp 118.118.118.118 -group cdn -exclude-default-group

				domain-rules /360buyimg.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /aicdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /alicdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /cnbetacdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /elemecdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /momentcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qcloudcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qihucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /qiniucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /sogoucdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /taobaocdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tmall.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tbcdn.cn/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /tbcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /vpgcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /weibocdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /xmcdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /xycdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
				domain-rules /yecdn.com/ -nameserver cdn -speed-check-mode tcp:443,ping
			EOF
		}

		start_instance /usr/bin/$NAME -c "/var/etc/${NAME}_cn.conf" -f
	}
}

stop_service() {
	del_cron
	rm -f "/var/etc/${NAME}*.conf" "/etc/hotplug.d/iface/*${NAME}*"
}

add_cron() {
	sed -i "/${NAME}/d" $CRON_FILE
	echo "0    *    * * *  rm -f /var/log/${NAME}_healthcheck.log 2>&1" >>$CRON_FILE
	echo "*    *    * * * /etc/init.d/${NAME} healthcheck >> /var/log/_${NAME}_healthcheck.log 2>&1" >>$CRON_FILE
	/etc/init.d/cron restart
}

del_cron() {
	grep -q "${NAME}" $CRON_FILE || return 0
	sed -i "/${NAME}/d" $CRON_FILE
	/etc/init.d/cron restart
}

add_hotplug() {
	cat <<EOF >"/etc/hotplug.d/iface/${START}-${NAME}"
#!/bin/sh /etc/rc.common

[ "V\$ACTION" = "Vifup" ] || exit 0

logger -t hotplug smartdns-reload

/etc/init.d/${NAME} restart

exit $?
EOF
	chmod +x "/etc/hotplug.d/iface/${START}-${NAME}"
}

healthcheck() {
	uci_bool_by_type $NAME enable || {
		del_cron
		return 1
	}

	# init check
	LOGTIME=$(date "+%Y-%m-%d %H:%M:%S")
	grep 'pending' /var/log/${NAME}*.log | grep -qE 'failed.$' && {
		rm -f /var/log/${NAME}*
		echo "[${LOGTIME}] Problem-Init decteted, restarting ${NAME}..."
		/etc/init.d/${NAME} restart
		return 0
	}

	# smartdns check
	/usr/bin/pgrep -f ${NAME}.conf >/dev/null || {
		echo "[${LOGTIME}] Problem decteted, restarting ${NAME}..."
		/etc/init.d/${NAME} restart
		return 0
	}

	# smartdns_cn check
	uci_bool_by_type $NAME enable_cn && {
		/usr/bin/pgrep -f ${NAME}_cn.conf >/dev/null || {
			echo "[${LOGTIME}] Problem decteted, restarting ${NAME}..."
			/etc/init.d/${NAME} restart
			return 0
		}
	}

	echo "[${LOGTIME}] ${NAME} No Problem."
}
